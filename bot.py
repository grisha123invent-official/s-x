import os
import logging
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext, CallbackQueryHandler, ConversationHandler
from places_api import get_nearby_places, get_place_details
from geopy.distance import geodesic

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –±–µ—Å–µ–¥—ã
LOCATION, RADIUS, INTERESTS, PLACE_SELECTION = range(4)

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
INTEREST_CATEGORIES = {
    "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ": ["museum", "historic", "landmark"],
    "–ü—Ä–∏—Ä–æ–¥–Ω—ã–µ": ["park", "natural_feature"],
    "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞": ["church", "mosque", "hindu_temple", "synagogue", "point_of_interest"],
    "–ö—É–ª—å—Ç—É—Ä–Ω—ã–µ": ["art_gallery", "library"],
    "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è": ["amusement_park", "zoo", "aquarium"]
}

# –†–∞–¥–∏—É—Å—ã –ø–æ–∏—Å–∫–∞
RADIUS_OPTIONS = {
    "100 –º–µ—Ç—Ä–æ–≤": 100,
    "300 –º–µ—Ç—Ä–æ–≤": 300,
    "500 –º–µ—Ç—Ä–æ–≤": 500,
    "1 –∫–∏–ª–æ–º–µ—Ç—Ä": 1000
}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data_store = {}

def start(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±–æ—Ç-—ç–∫—Å–∫—É—Ä—Å–æ–≤–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –Ω–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏. "
        f"–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=ReplyKeyboardMarkup(
            [[KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
    )
    return LOCATION

def location_handler(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
    user_id = update.effective_user.id
    user_location = update.message.location
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data_store[user_id] = {
        "location": {
            "latitude": user_location.latitude,
            "longitude": user_location.longitude
        }
    }
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞
    keyboard = []
    for radius_name in RADIUS_OPTIONS:
        keyboard.append([InlineKeyboardButton(radius_name, callback_data=f"radius_{RADIUS_OPTIONS[radius_name]}")])
    
    update.message.reply_text(
        "–í –∫–∞–∫–æ–º —Ä–∞–¥–∏—É—Å–µ –∏—Å–∫–∞—Ç—å –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    return RADIUS

def radius_handler(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–∞–¥–∏—É—Å–∞"""
    query = update.callback_query
    query.answer()
    
    user_id = query.from_user.id
    radius = int(query.data.split('_')[1])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞
    user_data_store[user_id]["radius"] = radius
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
    keyboard = []
    for category in INTEREST_CATEGORIES:
        keyboard.append([InlineKeyboardButton(category, callback_data=f"interest_{category}")])
    keyboard.append([InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data="interest_done")])
    
    query.edit_message_text(
        "–ö–∞–∫–∏–µ —Ç–∏–ø—ã –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç? –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
    user_data_store[user_id]["interests"] = []
    
    return INTERESTS

def interest_handler(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"""
    query = update.callback_query
    query.answer()
    
    user_id = query.from_user.id
    data = query.data
    
    if data == "interest_done":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫–æ–Ω—á–∏–ª –≤—ã–±–æ—Ä –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
        return search_places(update, context)
    
    # –î–æ–±–∞–≤–ª—è–µ–º/—É–¥–∞–ª—è–µ–º –∏–Ω—Ç–µ—Ä–µ—Å
    interest = data.split('_')[1]
    
    if interest in user_data_store[user_id]["interests"]:
        user_data_store[user_id]["interests"].remove(interest)
    else:
        user_data_store[user_id]["interests"].append(interest)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Ç–º–µ—Ç–∫–∞–º–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
    keyboard = []
    for category in INTEREST_CATEGORIES:
        text = f"‚úÖ {category}" if category in user_data_store[user_id]["interests"] else category
        keyboard.append([InlineKeyboardButton(text, callback_data=f"interest_{category}")])
    keyboard.append([InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data="interest_done")])
    
    query.edit_message_text(
        "–ö–∞–∫–∏–µ —Ç–∏–ø—ã –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç? –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    return INTERESTS

def search_places(update: Update, context: CallbackContext) -> int:
    """–ü–æ–∏—Å–∫ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    query = update.callback_query
    user_id = query.from_user.id
    user_data = user_data_store[user_id]
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—ã –≤ —Ç–∏–ø—ã –º–µ—Å—Ç –¥–ª—è API
    place_types = []
    for interest in user_data["interests"]:
        place_types.extend(INTEREST_CATEGORIES[interest])
    
    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ —Ç–∏–ø—ã
    if not place_types:
        for categories in INTEREST_CATEGORIES.values():
            place_types.extend(categories)
    
    # –ü–æ–∏—Å–∫ –º–µ—Å—Ç
    query.edit_message_text("–ò—â—É –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏...")
    
    places = get_nearby_places(
        user_data["location"]["latitude"],
        user_data["location"]["longitude"],
        user_data["radius"],
        place_types
    )
    
    if not places:
        query.edit_message_text(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –º–µ—Å—Ç –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart")]])
        )
        return ConversationHandler.END
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –º–µ—Å—Ç–∞
    user_data["places"] = places
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –º–µ—Å—Ç–æ
    keyboard = []
    for i, place in enumerate(places[:5]):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ 5 –º–µ—Å—Ç–∞–º–∏
        distance = geodesic(
            (user_data["location"]["latitude"], user_data["location"]["longitude"]),
            (place["geometry"]["location"]["lat"], place["geometry"]["location"]["lng"])
        ).meters
        
        keyboard.append([
            InlineKeyboardButton(
                f"{place['name']} (~{int(distance)}–º)",
                callback_data=f"place_{i}"
            )
        ])
    
    query.edit_message_text(
        "–Ø –Ω–∞—à–µ–ª –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –º–µ—Å—Ç –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –Ω–∏—Ö:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    return PLACE_SELECTION

def place_selection_handler(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–µ—Å—Ç–∞"""
    query = update.callback_query
    query.answer()
    
    user_id = query.from_user.id
    place_index = int(query.data.split('_')[1])
    selected_place = user_data_store[user_id]["places"][place_index]
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–µ
    query.edit_message_text(f"–ó–∞–≥—Ä—É–∂–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ {selected_place['name']}...")
    
    place_details = get_place_details(selected_place["place_id"])
    user_data_store[user_id]["selected_place"] = place_details
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–µ
    user_location = user_data_store[user_id]["location"]
    place_location = place_details["geometry"]["location"]
    
    distance = geodesic(
        (user_location["latitude"], user_location["longitude"]),
        (place_location["lat"], place_location["lng"])
    ).meters
    
    address = place_details.get("formatted_address", "–ê–¥—Ä–µ—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    rating = place_details.get("rating", "–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫")
    
    place_info = (
        f"üìç <b>{place_details['name']}</b>\n\n"
        f"üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {int(distance)} –º–µ—Ç—Ä–æ–≤\n"
        f"üè† –ê–¥—Ä–µ—Å: {address}\n"
        f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {rating}\n\n"
    )
    
    if "photos" in place_details:
        photo_reference = place_details["photos"][0]["photo_reference"]
        photo_url = f"https://maps.googleapis.com/maps/api/place/photo?maxwidth=600&photoreference={photo_reference}&key={os.getenv('GOOGLE_PLACES_API_KEY')}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        context.bot.send_photo(
            chat_id=query.message.chat_id,
            photo=photo_url,
            caption=place_info,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ü—Ä–æ–ª–æ–∂–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç", callback_data=f"route_{place_index}")],
                [InlineKeyboardButton("–ú–∏–Ω–∏-—ç–∫—Å–∫—É—Ä—Å–∏—è", callback_data=f"excursion_{place_index}")],
                [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –º–µ—Å—Ç–æ", callback_data="back_to_places")]
            ])
        )
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        query.edit_message_text(
            place_info,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ü—Ä–æ–ª–æ–∂–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç", callback_data=f"route_{place_index}")],
                [InlineKeyboardButton("–ú–∏–Ω–∏-—ç–∫—Å–∫—É—Ä—Å–∏—è", callback_data=f"excursion_{place_index}")],
                [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –º–µ—Å—Ç–æ", callback_data="back_to_places")]
            ])
        )
    
    return PLACE_SELECTION

def route_handler(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞"""
    query = update.callback_query
    query.answer()
    
    user_id = query.from_user.id
    place_index = int(query.data.split('_')[1])
    selected_place = user_data_store[user_id]["places"][place_index]
    
    user_location = user_data_store[user_id]["location"]
    place_location = selected_place["geometry"]["location"]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ Google Maps
    maps_url = (
        f"https://www.google.com/maps/dir/?api=1"
        f"&origin={user_location['latitude']},{user_location['longitude']}"
        f"&destination={place_location['lat']},{place_location['lng']}"
        f"&travelmode=walking"
    )
    
    query.edit_message_text(
        f"–ú–∞—Ä—à—Ä—É—Ç –¥–æ {selected_place['name']} –ø–æ—Å—Ç—Ä–æ–µ–Ω! –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –µ–≥–æ –≤ Google Maps:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –º–∞—Ä—à—Ä—É—Ç", url=maps_url)],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"place_{place_index}")]
        ])
    )
    
    return PLACE_SELECTION

def excursion_handler(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –º–∏–Ω–∏-—ç–∫—Å–∫—É—Ä—Å–∏—é"""
    query = update.callback_query
    query.answer()
    
    user_id = query.from_user.id
    place_index = int(query.data.split('_')[1])
    selected_place = user_data_store[user_id]["selected_place"]
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —ç–∫—Å–∫—É—Ä—Å–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Å—Ç–µ
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    # –∏–ª–∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å ChatGPT –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    
    excursion_text = (
        f"<b>–ú–∏–Ω–∏-—ç–∫—Å–∫—É—Ä—Å–∏—è –ø–æ {selected_place['name']}</b>\n\n"
        f"–≠—Ç–æ –º–µ—Å—Ç–æ –∏–º–µ–µ—Ç –±–æ–ª—å—à—É—é –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫—É—é –∏ –∫—É–ª—å—Ç—É—Ä–Ω—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å. "
        f"–û–Ω–æ –±—ã–ª–æ –æ—Å–Ω–æ–≤–∞–Ω–æ –º–Ω–æ–≥–æ –ª–µ—Ç –Ω–∞–∑–∞–¥ –∏ —Å —Ç–µ—Ö –ø–æ—Ä –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ç—É—Ä–∏—Å—Ç–æ–≤. "
        f"–û—Å–æ–±–µ–Ω–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –∏—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≤–∏—Ç–∏—è —ç—Ç–æ–≥–æ –º–µ—Å—Ç–∞.\n\n"
        f"–í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏ —Ç–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –º–µ—Å—Ç–µ, "
        f"—Å–æ–±—Ä–∞–Ω–Ω–∞—è –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å –ø–æ–º–æ—â—å—é AI."
    )
    
    query.edit_message_text(
        excursion_text,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"place_{place_index}")]
        ])
    )
    
    return PLACE_SELECTION

def back_to_places(update: Update, context: CallbackContext) -> int:
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –º–µ—Å—Ç"""
    query = update.callback_query
    query.answer()
    
    user_id = query.from_user.id
    user_data = user_data_store[user_id]
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –º–µ—Å—Ç–æ
    keyboard = []
    for i, place in enumerate(user_data["places"][:5]):
        distance = geodesic(
            (user_data["location"]["latitude"], user_data["location"]["longitude"]),
            (place["geometry"]["location"]["lat"], place["geometry"]["location"]["lng"])
        ).meters
        
        keyboard.append([
            InlineKeyboardButton(
                f"{place['name']} (~{int(distance)}–º)",
                callback_data=f"place_{i}"
            )
        ])
    
    query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –º–µ—Å—Ç:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    return PLACE_SELECTION

def restart(update: Update, context: CallbackContext) -> int:
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    query = update.callback_query
    query.answer()
    
    return start(update, context)

def cancel(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel"""
    update.message.reply_text(
        "–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start.",
        reply_markup=ReplyKeyboardMarkup([["/start"]], resize_keyboard=True)
    )
    
    return ConversationHandler.END

def help_command(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    update.message.reply_text(
        "–Ø –±–æ—Ç-—ç–∫—Å–∫—É—Ä—Å–æ–≤–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –Ω–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä—è–¥–æ–º —Å –≤–∞–º–∏.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π\n"
        "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø–æ–∏—Å–∫\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    )

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    token = os.getenv("TELEGRAM_TOKEN")
    if not token:
        logger.error("–ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")
        return
    
    # –°–æ–∑–¥–∞–µ–º Updater –∏ –ø–µ—Ä–µ–¥–∞–µ–º –µ–º—É —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    updater = Updater(token)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    dispatcher = updater.dispatcher
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            LOCATION: [MessageHandler(Filters.location, location_handler)],
            RADIUS: [CallbackQueryHandler(radius_handler, pattern=r"^radius_")],
            INTERESTS: [CallbackQueryHandler(interest_handler, pattern=r"^interest_")],
            PLACE_SELECTION: [
                CallbackQueryHandler(place_selection_handler, pattern=r"^place_"),
                CallbackQueryHandler(route_handler, pattern=r"^route_"),
                CallbackQueryHandler(excursion_handler, pattern=r"^excursion_"),
                CallbackQueryHandler(back_to_places, pattern=r"^back_to_places$"),
                CallbackQueryHandler(restart, pattern=r"^restart$"),
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    dispatcher.add_handler(conv_handler)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã help
    dispatcher.add_handler(CommandHandler("help", help_command))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    updater.start_polling()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    
    # –†–∞–±–æ—Ç–∞–µ–º –¥–æ –Ω–∞–∂–∞—Ç–∏—è Ctrl-C
    updater.idle()

if __name__ == "__main__":
    main() 